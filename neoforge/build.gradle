plugins {
    id 'java'
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'net.neoforged.moddev' version '1.0.21'
}

base {
    archivesName = "${mod_id}-neoforge"
}

def dependencyProjects = [
        project(":common"),
]

dependencyProjects.forEach {
    project.evaluationDependsOn(it.path)
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(minecraft_java_build_version)
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
    dependencyProjects.forEach {
        compileOnly it
    }
}

tasks.named('compileJava', JavaCompile).configure {
    for (p in dependencyProjects) {
        source p.sourceSets.main.allSource
    }
}

processResources {
    for (p in dependencyProjects) {
        from p.sourceSets.main.resources
    }
}

neoForge {
    // Specify the version of NeoForge to use.
    version = neoforge_version

    parchment {
        mappingsVersion = neo_parchment_mappings_version
        minecraftVersion = neo_parchment_minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        // applies to all the run configs below
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            systemProperty 'forge.logging.console.level', 'info'
            systemProperty 'neoforge.enabledGameTestNamespaces', mod_id

//        ideaModule "${rootProject.name}.${project.name}.main"
        }

        client {
            client()
            gameDirectory = file("run/client")
        }

        server {
            server()
            gameDirectory = file("run/server")
            programArgument '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = 'gameTestServer'
            gameDirectory = file("run/gameTestServer")
        }

        data {
            data()
            gameDirectory = file("run/data")
            programArguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    archiveClassifier = 'sources'
    from sourceSets.main.allJava

    for (p in dependencyProjects) {
        from p.sourceSets.main.allJava
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.named('jar', Jar) {
    from sourceSets.main.output
    for (p in dependencyProjects) {
        from p.sourceSets.main.output
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Jar).configureEach {
    destinationDirectory.set(file(rootProject.rootDir.path + "/output"))
}

artifacts {
    archives jar
    archives sourcesJar
}