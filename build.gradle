plugins {
    id 'idea'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.9"
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

subprojects {
    // IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
    idea {
        module {
            downloadSources = true
            downloadJavadoc = true
        }
    }

    version = "${minecraft_version}-${mod_version}"
    group = mod_group_id

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
        options.release.set(JavaLanguageVersion.of(minecraft_java_build_version).asInt())
        sourceCompatibility = targetCompatibility = minecraft_java_build_version // Need this here so eclipse task generates correctly.
    }

    def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta', 'fabric.mod.json', 'META-INF/neoforge.mods.toml']
    def replaceProperties = [
            minecraft_version               : minecraft_version,
            minecraft_java_build_version    : minecraft_java_build_version,
            forge_minecraft_version_range   : forge_minecraft_version_range,
            forge_version                   : forge_version,
            forge_version_range             : forge_version_range,
            forge_loader_version_range      : forge_loader_version_range,
            neoforge_minecraft_version_range: neoforge_minecraft_version_range,
            neoforge_version                : neoforge_version,
            neoforge_version_range          : neoforge_version_range,
            neoforge_loader_version_range   : neoforge_loader_version_range,
            fabric_loader_version           : fabric_loader_version,
            fabric_minecraft_versions       : fabric_minecraft_versions,
            fabric_api_version              : fabric_api_version,
            mod_id                          : mod_id,
            mod_name                        : mod_name,
            mod_license                     : mod_license,
            mod_version                     : mod_version,
            mod_authors                     : mod_authors,
            mod_description                 : mod_description,
            mod_curseforge_link             : mod_curseforge_link,
            mod_github_link                 : mod_github_link
    ]
    tasks.withType(ProcessResources).configureEach {
        inputs.properties replaceProperties
//        replaceProperties.put 'project', project

        filesMatching(resourceTargets) {
            expand replaceProperties
        }
    }

    tasks.withType(Jar).configureEach {
        manifest {
            attributes([
                    "Specification-Title"     : mod_id,
                    "Specification-Vendor"    : mod_authors,
                    "Specification-Version"   : mod_version,
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }
}